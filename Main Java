import java.sql.*;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class testing1 { // JDBC driver name and database URL
   static final String JDBC_DRIVER = "org.apache.derby.jdbc.ClientDriver";
   static final String DB_URL = "jdbc:derby://localhost:1527/sqlPractice1";

   //  Database credentials
   static final String USER = "user002";
   static final String PASS = "PASS";
   static final int MYSQL_DUPLICATE_PK = 1062;
   
   ////////////////////////
     static String group_name;
     static String head_writer; 
     static String year_formed;          
     static String subject;
     static String book_title;
     static String publisher_name;
     static String year_published;
     static String number_pages;
     static String publisher_address;
     static String publisher_phone;
     static String publisher_email;
   //////////////////////
     
     static Connection conn = null;
     
     
   public static void main(String[] args) throws SQLException {
   Statement stmt = null;
       
   try {
   //STEP 2: Register JDBC driver
      Class.forName(JDBC_DRIVER);

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);
      stmt = conn.createStatement();   
      
      System.out.println("Connected database successfully...");
      
      //databaseMenu();
      
      //publisherInfo();
      //listBookTitles();
      //listOneBookAll();
      
      //STEP 4: Execute a query
      System.out.println("Creating table...");
     databaseMenu();
     
       //rs.close();
      
      //rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
}//end main

public static void databaseMenu() throws SQLException
{
    int userInput;
    Scanner scan = new Scanner(System.in);
    System.out.println("");
    System.out.println("----------------------------------------------------------------------------");
    System.out.println("Enter number for option (Enter any number not in the options to exit)");
    System.out.println("List all writing groups             [1]");
    System.out.println("List all data for given group       [2]");
    System.out.println("List all publishers                 [3]");
    System.out.println("List all data for a given publisher [4]");
    System.out.println("List all book titles                [5]");
    System.out.println("List all data for a single book     [6]");
    System.out.println("Insert a new book                   [7]");
    System.out.println("Insert new publisher (update books) [8]");
    System.out.println("Remove a book                       [9]");
    System.out.println("");
    System.out.print("Enter choice: ");
    userInput = scan.nextInt();
    System.out.println("----------------------------------------------------------------------------");
    
    
    if(userInput < 1 || userInput > 9)
    {
        System.out.println("GoodBye!");
        return;
    }
    
    switch (userInput) 
    {
        case 1:
            listAllWritingGroups();
            break;
        case 2:
            listAllDataForGroup();
            break;
        case 3:
            listAllPublishers();
            break;
        case 4:
            listPublisherInfo();
            break;
        case 5:
            listBookTitles();
            break;
        case 6:
            listOneBookInfo();
            break;
        case 7:
            insertNewBook();
            break;
        case 8:
            newPubAndUpdate();
            break;
        default:   
            removeBook();
    }
}

public static void listAllWritingGroups() throws SQLException  ////////////////////YOUR NUMBER 1 NHAT
{
    Statement stmt = conn.createStatement();
    
    String sql = "SELECT groupName FROM WritingGroups";  
    
    ResultSet rs = stmt.executeQuery(sql);

    System.out.println("/////////////////// Listing All Writing Groups ///////////////////");
    while(rs.next())
    {
         String titleBook = rs.getString("groupName");
         System.out.println("Group Name: " + titleBook + " ");
    }
    
    rs.close();
    stmt.close();  
    databaseMenu();
}

public static void listAllDataForGroup() throws SQLException  //////////////////////YOUR NUMBER 2 NHAT
{
   String temp, userGroupName;
    
    temp = "Group Name";
    
    userGroupName = getUserInput(temp);
   
    
    String check_query = "SELECT groupName FROM WritingGroups WHERE groupName = ?";
            PreparedStatement check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userGroupName);
            ResultSet result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Group " + userGroupName + " does not exist");
                result.close();
                check_stmt.close();
                databaseMenu();
                return;
            }
            
    String sql = "SELECT * FROM WRITINGGROUPS NATURAL JOIN PUBLISHERS NATURAL JOIN BOOKS WHERE groupName = ?";  
    PreparedStatement pstmt = null; 
    pstmt = conn.prepareStatement(sql);
    pstmt.setString(1, userGroupName);
      
    ResultSet rs = pstmt.executeQuery();
      
      System.out.println("///////////////////" + userGroupName + " information///////////////////");
      while(rs.next())
      {
         group_name = rs.getString("GroupName");
         head_writer = rs.getString("HeadWriter");
         year_formed = rs.getString("YearFormed");
         subject = rs.getString("Subject");
         book_title = rs.getString("BookTitle");
         publisher_name = rs.getString("PublisherName");
         year_published = rs.getString("YearPublished");
         number_pages = rs.getString("NumberPages");
         publisher_address = rs.getString("PublisherAddress");
         publisher_phone = rs.getString("PublisherPhone");
         publisher_email = rs.getString("PublisherEmail");
    
         System.out.print(" | Book Title: " + book_title + " ");
         System.out.print(" | Year Published: " + year_published + " ");
         System.out.print(" | Number Pages: " + number_pages + " ");
         System.out.print(" | Group name: " + group_name + " ");
         System.out.print(" | Head Writer: " + head_writer + " ");
         System.out.print(" | Year Formed: " + year_formed + " ");
         System.out.print(" | Subject: " + subject + " ");
         System.out.print(" | Publisher Name: " + publisher_name + " ");
         System.out.print(" | Publisher Address: " + publisher_address + " ");
         System.out.print(" | Publisher Phone: " + publisher_phone + " ");
         System.out.println(" | Publisher email: " + publisher_email + " ");
      }
      
      
       rs.close();
       result.close();
       check_stmt.close();
       pstmt.close();
       
       databaseMenu();
      
}

public static void listAllPublishers() throws SQLException   ///////////////////////YOUR NUMBER 3 NHAT
{
    Statement stmt = conn.createStatement();
    
    String sql = "SELECT publisherName FROM Publishers";  
    
    ResultSet rs = stmt.executeQuery(sql);

    System.out.println("/////////////////// Listing All Publishers ///////////////////");
    while(rs.next())
    {
         String pName = rs.getString("publisherName");
         System.out.println("Publisher Name: " + pName + " ");
    }
    
    rs.close();
    stmt.close();  
    databaseMenu();
}

public static void listPublisherInfo() throws SQLException   ////////////////////NUMBER 4
{
    PreparedStatement pstmt = null;
    
    String temp = "Publisher Name";
    String userPublisherName = getUserInput(temp);
    
    String check_query = "SELECT publisherName FROM Publishers NATURAL JOIN BOOKS where publisherName = ?";
            PreparedStatement check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userPublisherName);
            ResultSet result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Publisher Name " + userPublisherName + "does not exist");
                result.close();
                databaseMenu();
                return;
            }
    
    
    String sql = "SELECT * FROM WRITINGGROUPS NATURAL JOIN PUBLISHERS NATURAL JOIN BOOKS WHERE publisherName = ?";  
      
    pstmt = conn.prepareStatement(sql);
    pstmt.setString(1, userPublisherName);
      
    ResultSet rs = pstmt.executeQuery();
      
      System.out.println("///////////////////" + userPublisherName + " information///////////////////");
      while(rs.next())
      {
         group_name = rs.getString("GroupName");
         head_writer = rs.getString("HeadWriter");
         year_formed = rs.getString("YearFormed");
         subject = rs.getString("Subject");
         book_title = rs.getString("BookTitle");
         publisher_name = rs.getString("PublisherName");
         year_published = rs.getString("YearPublished");
         number_pages = rs.getString("NumberPages");
         publisher_address = rs.getString("PublisherAddress");
         publisher_phone = rs.getString("PublisherPhone");
         publisher_email = rs.getString("PublisherEmail");
    
         System.out.print(" | Publisher Name: " + publisher_name + " ");
         System.out.print(" | Publisher Address: " + publisher_address + " ");
         System.out.print(" | Publisher Phone: " + publisher_phone + " ");
         System.out.print(" | Publisher email: " + publisher_email + " ");
         System.out.print(" | Book Title: " + book_title + " ");
         System.out.print(" | Year Published: " + year_published + " ");
         System.out.print(" | Number Pages: " + number_pages + " ");
         System.out.print(" | Group name: " + group_name + " ");
         System.out.print(" | Head Writer: " + head_writer + " ");
         System.out.print(" | Year Formed: " + year_formed + " ");
         System.out.println(" | Subject: " + subject + " ");
      }
      
       result.close();
       rs.close();
       pstmt.close();
       databaseMenu();
      
}

   
public static void listBookTitles() throws SQLException
{
    Statement stmt = conn.createStatement();
    
    String sql = "SELECT bookTitle FROM BOOKS";  
    
    ResultSet rs = stmt.executeQuery(sql);

    System.out.println("/////////////////// Listing All Book Titles ///////////////////");
    while(rs.next())
    {
         String titleBook = rs.getString("bookTitle");
         System.out.println("Book Title: " + titleBook + " ");
    }
    
    rs.close();
    stmt.close();  
    databaseMenu();
    
}

public static void listOneBookInfo() throws SQLException
{
    String temp, userBookTitle, userGroupName, userPublisherName;
    
    temp = "Book Title";
    
    userBookTitle = getUserInput(temp);
    
    temp = "Group Name";
    
    userGroupName = getUserInput(temp);
    
    temp = "Publisher Name";
    
    userPublisherName = getUserInput(temp);
    
    String check_query = "SELECT bookTitle FROM BOOKS where bookTitle = ?";
            PreparedStatement check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userBookTitle);
            ResultSet result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Book titled  " + userBookTitle + " does not exist");
                result.close();
                databaseMenu();
                return;
            }
            
    
    check_query = "SELECT groupName FROM WritingGroups NATURAL JOIN BOOKS where groupName = ?";
            check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userGroupName);
            result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Group name " + userGroupName + "does not exist, , or doesn't match book title " + userBookTitle);
                result.close();
                databaseMenu();                
                return;
            }
    
    check_query = "SELECT publisherName FROM Publishers NATURAL JOIN BOOKS where publisherName = ?";
            check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userPublisherName);
            result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Publisher Name " + userPublisherName + "does not exist, or doesn't match book title " + userBookTitle);
                result.close();
                databaseMenu();
                return;
            }
    
    String sql = "SELECT * FROM WRITINGGROUPS NATURAL JOIN PUBLISHERS NATURAL JOIN BOOKS WHERE bookTitle = ?";  
    PreparedStatement pstmt = null; 
    pstmt = conn.prepareStatement(sql);
    pstmt.setString(1, userBookTitle);
      
    ResultSet rs = pstmt.executeQuery();
      
      System.out.println("///////////////////" + userBookTitle + " information///////////////////");
      while(rs.next())
      {
         group_name = rs.getString("GroupName");
         head_writer = rs.getString("HeadWriter");
         year_formed = rs.getString("YearFormed");
         subject = rs.getString("Subject");
         book_title = rs.getString("BookTitle");
         publisher_name = rs.getString("PublisherName");
         year_published = rs.getString("YearPublished");
         number_pages = rs.getString("NumberPages");
         publisher_address = rs.getString("PublisherAddress");
         publisher_phone = rs.getString("PublisherPhone");
         publisher_email = rs.getString("PublisherEmail");
    
         System.out.print("Book Title: " + book_title + " ");
         System.out.print(" | Year Published: " + year_published + " ");
         System.out.print(" | Number Pages: " + number_pages + " ");
         System.out.print(" | Group name: " + group_name + " ");
         System.out.print(" | Head Writer: " + head_writer + " ");
         System.out.print(" | Year Formed: " + year_formed + " ");
         System.out.print(" | Subject: " + subject + " ");
         System.out.print(" | Publisher Name: " + publisher_name + " ");
         System.out.print(" | Publisher Address: " + publisher_address + " ");
         System.out.print(" |Publisher Phone: " + publisher_phone + " ");
         System.out.println(" | Publisher email: " + publisher_email + " ");
      }
      
      
       rs.close();
       result.close();
       check_stmt.close();
       pstmt.close();
       
       databaseMenu();
      

}
public static void seven() {
        Connection conn = null;
        Statement stmt = null;
        Scanner myObj = new Scanner(System.in);  // Create a Scanner object
        //Assuming that users always enter a group that exists in our table
        System.out.println("Enter group name: ");

        String groupName = myObj.nextLine();  // Read user input
        System.out.println("GroupName is: " + groupName); // Output user input
        try {
            Class.forName(JDBC_DRIVER);

            //STEP 3: Open a connection
            //System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            //Check if group name exists
            String check_query = "select groupName from WritingGroups where groupName = ?";
            PreparedStatement check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, groupName);
            ResultSet result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Group name " + groupName + "does not exist");
                return;
            }
            // extract data from the ResultSe
        }catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        System.out.println("Enter publisher: ");
        String publisher = myObj.nextLine();
        System.out.println("Publisher name is: "+  publisher);
        try {
            Class.forName(JDBC_DRIVER);

            //STEP 3: Open a connection
            //System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            //Check if group name exists
            String check_query = "select publisherName from Publishers where publisherName = ?";
            PreparedStatement check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, publisher);
            ResultSet result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Publisher name " + publisher + "does not exist");
                return;
            }
            // extract data from the ResultSe
        }catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
        
        System.out.println("Enter book title: ");
        String book_title = myObj.nextLine();
        System.out.println("Enter number of pages: ");
        String number_of_pages = myObj.nextLine();
        
        
        System.out.println("Enter year published: ");
        int year_published = myObj.nextInt();
        try {
            Class.forName(JDBC_DRIVER);

            //STEP 3: Open a connection
            //System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            //Check if group name exists
            String query = "insert into books values (?, ?, ?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, book_title);
            pstmt.setInt(2, year_published);
            pstmt.setInt(3, Integer.parseInt(number_of_pages));
            pstmt.setString(4, groupName);
            pstmt.setString(5, publisher);
            
            pstmt.executeUpdate();
            // extract data from the ResultSe
            System.out.println("New book inserted");
        }catch (SQLException se) {
            //Handle errors for JDBC
            if(se.getErrorCode() == MYSQL_DUPLICATE_PK ){
                System.out.println("Duplicate primary key, nothing inserted");
                //duplicate primary key 
            }
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
        
      
        
        
    }
    public static void eight() {
        Connection conn = null;
        Statement stmt = null;
        boolean flag = false;
        boolean bought_out_flag = false;
        String publisher;
        String bought_out_publisher;
        Scanner myObj = new Scanner(System.in);
        do{
            
            System.out.println("Enter new publisher : ");
            publisher = myObj.nextLine();
            System.out.println("Enter bought publisher: ");
            bought_out_publisher = myObj.nextLine();
            try {
            Class.forName(JDBC_DRIVER);

            //STEP 3: Open a connection
            //System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            //Check if group name exists
            String check_query = "select publisherName from Publishers where publisherName = ?";
            String current = "select publisherName from Publishers where publisherName = ?";
            PreparedStatement check_stmt = conn.prepareStatement(check_query);
            PreparedStatement second_check = conn.prepareStatement(current);
            check_stmt.setString(1, publisher);
            second_check.setString(1, bought_out_publisher);
            ResultSet result = check_stmt.executeQuery();
            ResultSet result_two = second_check.executeQuery();
            if (result.next()) {
                System.out.println("Publisher name " + publisher + " already exists");
                //flag = true;
                //break;
                //return;
            }
            else {
                flag = true;
            }
            if (!result_two.next()) {
                System.out.println("Bought out publisher named " + bought_out_publisher + " does not exist");
            }
            else{
                bought_out_flag = true;
            }
            // extract data from the ResultSe
        }catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
        }while(!flag && !bought_out_flag);
        //Add publisher to new database
        System.out.println("Enter publisher address : ");
        String publisher_address = myObj.nextLine();
        System.out.println("Enter publisher phone: ");
        String publisher_phone = myObj.nextLine();
        System.out.println("Enger publisher email: ");
        String publisher_email = myObj.nextLine();
        
        try {
            Class.forName(JDBC_DRIVER);

            //STEP 3: Open a connection
            //System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            //Check if group name exists
            String query = "insert into  publishers values (?, ?, ?, ?)";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, publisher);
            pstmt.setString(2, publisher_address);
            pstmt.setString(3, publisher_phone);
            pstmt.setString(4, publisher_email);
            
            pstmt.executeUpdate();
            
        }catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
        try {
            Class.forName(JDBC_DRIVER);

            //STEP 3: Open a connection
            //System.out.println("Connecting to database...");
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            //Check if group name exists
            String query = "update books set publisherName = ? where publisherName = ?";
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setString(1, publisher);
            pstmt.setString(2, bought_out_publisher);
            
            
            pstmt.executeUpdate();
            
        }catch (SQLException se) {
            //Handle errors for JDBC
            se.printStackTrace();
        } catch (Exception e) {
            //Handle errors for Class.forName
            e.printStackTrace();
        } finally {
            //finally block used to close resources
            try {
                if (stmt != null) {
                    stmt.close();
                }
            } catch (SQLException se2) {
            }// nothing we can do
            try {
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException se) {
                se.printStackTrace();
            }//end finally try
        }//end try
        
        
        
        
        
    }


public static void insertNewBook() throws SQLException ////////////////////////////////////////
{
    System.out.println("In case 7");
    databaseMenu();
}

public static void newPubAndUpdate() throws SQLException  /////////////////////////////////////////////////
{
    System.out.println("In case 8");
    databaseMenu();
}

public static void removeBook() throws SQLException
{
    String temp, userBookTitle, userGroupName, userPublisherName;
    
    temp = "Book Title";
    
    userBookTitle = getUserInput(temp);
    
    temp = "Group Name";
    
    userGroupName = getUserInput(temp);
    
    temp = "Publisher Name";
    
    userPublisherName = getUserInput(temp);
    
    String check_query = "SELECT bookTitle FROM BOOKS where bookTitle = ?";
            PreparedStatement check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userBookTitle);
            ResultSet result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Book titled  " + userBookTitle + " does not exist");
                result.close();
                databaseMenu();
                return;
            }
            
    
    check_query = "SELECT groupName FROM WritingGroups NATURAL JOIN BOOKS where groupName = ?";
            check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userGroupName);
            result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Group name " + userGroupName + "does not exist, , or doesn't match book title " + userBookTitle);
                result.close();
                databaseMenu();                
                return;
            }
    
    check_query = "SELECT publisherName FROM Publishers NATURAL JOIN BOOKS where publisherName = ?";
            check_stmt = conn.prepareStatement(check_query);
            check_stmt.setString(1, userPublisherName);
            result = check_stmt.executeQuery();
            if (!result.next()) {
                System.out.println("Publisher Name " + userPublisherName + "does not exist, or doesn't match book title " + userBookTitle);
                result.close();
                databaseMenu();
                return;
            }
         
    String sql = "DELETE FROM BOOKS WHERE bookTitle = ?";
    PreparedStatement pstmt = null; 
    pstmt = conn.prepareStatement(sql);
    pstmt.setString(1, userBookTitle);////////////
     
   pstmt.executeUpdate();
      
    System.out.println("");
    System.out.println("Deleted " + userBookTitle);
    System.out.println("");
    
    Statement stmt = conn.createStatement();
    
    sql = "SELECT bookTitle FROM BOOKS";  
    
    ResultSet rs = stmt.executeQuery(sql);

    System.out.println("/////////////////// Listing All Book Titles ///////////////////");
    while(rs.next())
    {
         String titleBook = rs.getString("bookTitle");
         System.out.println("Book Title: " + titleBook + " ");
    }  
       stmt.close();
       rs.close();
       result.close();
       check_stmt.close();
       pstmt.close();
       
       databaseMenu();
}

public static String getUserInput(String temp)
{
    String userInput;
    Scanner scan = new Scanner(System.in);
    System.out.print("Enter " + temp + ": ");
    userInput = scan.nextLine();
    return userInput;
}
   
}
